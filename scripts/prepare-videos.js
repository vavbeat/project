#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
 * 2. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ –¥–ª—è GitHub Pages
 * 3. –ö–æ–ø–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * 4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');
const fsPromises = require('fs').promises;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  sourceVideos: [
    'videos/Art_Futurology_optimized.mp4',
    'videos/FMCG_Perfumery_Image_optimized.mp4',
    'videos/Pushkin_Simple_optimized.mp4',
    'videos/Sports_Unexpected_Combination_optimized.mp4'
  ],
  targetDirectories: [
    'public/videos',
    'public/static/videos',
    'static/videos'
  ],
  requiredImages: [
    'images/alexandr.png',
    'images/evgenia.jpg',
    'images/team/alexandr.png',
    'images/team/evgenia.jpg',
    'images/team/evgeniy.jpg'
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function fileExists(filePath) {
  try {
    await fsPromises.access(filePath);
    return true;
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
async function copyFile(source, target) {
  try {
    await fsPromises.copyFile(source, target);
    console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${source} -> ${target}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${source} -> ${target}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
async function checkFileSize(filePath) {
  try {
    const stats = await fsPromises.stat(filePath);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
    console.log(`üìÅ –§–∞–π–ª: ${filePath} (${sizeMB} MB)`);
    return stats.size;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ ${filePath}:`, error.message);
    return 0;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤–∏–¥–µ–æ
async function prepareVideos() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –≤–∏–¥–µ–æ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages...\n');

  let successCount = 0;
  let errorCount = 0;

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
  console.log('üìπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤:');
  for (const videoPath of config.sourceVideos) {
    const exists = await fileExists(videoPath);
    if (exists) {
      const size = await checkFileSize(videoPath);
      if (size > 0) {
        successCount++;
      } else {
        errorCount++;
      }
    } else {
      console.error(`‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${videoPath}`);
      errorCount++;
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–µ–æ: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫\n`);

  // 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ü–µ–ª–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  console.log('üìÇ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ü–µ–ª–µ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
  
  for (const videoPath of config.sourceVideos) {
    if (await fileExists(videoPath)) {
      for (const targetDir of config.targetDirectories) {
        const fileName = path.basename(videoPath);
        const targetPath = path.join(targetDir, fileName);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fsPromises.mkdir(targetDir, { recursive: true });
        
        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await copyFile(videoPath, targetPath);
      }
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
  console.log('\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:');
  let imageSuccessCount = 0;
  let imageErrorCount = 0;

  for (const imagePath of config.requiredImages) {
    const exists = await fileExists(imagePath);
    if (exists) {
      await checkFileSize(imagePath);
      imageSuccessCount++;
    } else {
      console.error(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${imagePath}`);
      imageErrorCount++;
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageSuccessCount} —É—Å–ø–µ—à–Ω–æ, ${imageErrorCount} –æ—à–∏–±–æ–∫`);

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∏–¥–µ–æ
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤–∏–¥–µ–æ:');
  const videoFiles = {};
  
  for (const targetDir of config.targetDirectories) {
    try {
      const files = await fsPromises.readdir(targetDir);
      for (const file of files) {
        if (file.endsWith('.mp4')) {
          const filePath = path.join(targetDir, file);
          const stats = await fsPromises.stat(filePath);
          if (!videoFiles[file]) {
            videoFiles[file] = [];
          }
          videoFiles[file].push({
            path: filePath,
            size: stats.size,
            dir: targetDir
          });
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${targetDir}:`, error.message);
    }
  }

  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
  for (const [fileName, files] of Object.entries(videoFiles)) {
    if (files.length > 1) {
      console.log(`‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç –≤–∏–¥–µ–æ: ${fileName}`);
      files.forEach((file, index) => {
        console.log(`   ${index + 1}. ${file.path} (${(file.size / (1024 * 1024)).toFixed(2)} MB)`);
      });
    }
  }

  // 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log(`‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –≤–∏–¥–µ–æ: ${errorCount}`);
  console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageSuccessCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageErrorCount}`);
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –≤–∏–¥–µ–æ: ${config.targetDirectories.length}`);
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

  if (errorCount === 0 && imageErrorCount === 0) {
    console.log('\nüéâ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –¥–µ–ø–ª–æ—é –Ω–∞ GitHub Pages!');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Ç–∏ –≤–∏–¥–∞ /videos/–∏–º—è_—Ñ–∞–π–ª–∞.mp4 –¥–ª—è –≤–∏–¥–µ–æ');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Ç–∏ –≤–∏–¥–∞ /images/–∏–º—è_—Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
  } else {
    console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.');
  }

  return {
    videoSuccess: successCount,
    videoErrors: errorCount,
    imageSuccess: imageSuccessCount,
    imageErrors: imageErrorCount
  };
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  prepareVideos()
    .then(results => {
      process.exit(results.videoErrors === 0 && results.imageErrors === 0 ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { prepareVideos, config };
